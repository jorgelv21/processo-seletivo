{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jorge/OneDrive/\\xC1rea de Trabalho/Programa\\xE7\\xE3o/processo-seletivo/front-end-maptriz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { tap, first } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TableService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.API = '/contacts';\n  }\n\n  list() {\n    return this.httpClient.get(this.API).pipe(first(), tap(contacts => console.log(contacts)));\n  }\n\n  save(record) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(record.idContact);\n      console.log(record);\n\n      if (record.idContact) {\n        console.log('update');\n        return _this.update(record);\n      } else {\n        console.log('save');\n        return _this.create(record);\n      }\n    })();\n  }\n\n  create(record) {\n    return this.httpClient.post(this.API, record);\n  }\n\n  update(record) {\n    return this.httpClient.put(`${this.API}/${record.idContact}`, record).pipe(first());\n  }\n\n  loadById(id) {\n    return this.httpClient.get(`${this.API}/${id}`);\n  }\n\n  delete(id) {\n    return this.httpClient.delete(`${this.API}/${id}`).pipe(first(), tap(contacts => console.log(contacts)));\n  }\n\n}\n\nTableService.ɵfac = function TableService_Factory(t) {\n  return new (t || TableService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nTableService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TableService,\n  factory: TableService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/jorge/OneDrive/Área de Trabalho/Programação/processo-seletivo/front-end-maptriz/src/app/agenda/service/table.service.ts"],"names":["tap","first","i0","i1","TableService","constructor","httpClient","API","list","get","pipe","contacts","console","log","save","record","idContact","update","create","post","put","loadById","id","delete","ɵfac","TableService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,MAA3B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,GAAL,GAAW,WAAX;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKF,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,GAAzB,EAA8BG,IAA9B,CAAmCT,KAAK,EAAxC,EAA4CD,GAAG,CAAEW,QAAD,IAAcC,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAAf,CAA/C,CAAP;AACH;;AACKG,EAAAA,IAAI,CAACC,MAAD,EAAS;AAAA;;AAAA;AACfH,MAAAA,OAAO,CAACC,GAAR,CAAYE,MAAM,CAACC,SAAnB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;;AACA,UAAIA,MAAM,CAACC,SAAX,EAAsB;AAClBJ,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,eAAO,KAAI,CAACI,MAAL,CAAYF,MAAZ,CAAP;AACH,OAHD,MAIK;AACDH,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,eAAO,KAAI,CAACK,MAAL,CAAYH,MAAZ,CAAP;AACH;AAVc;AAWlB;;AACDG,EAAAA,MAAM,CAACH,MAAD,EAAS;AACX,WAAO,KAAKT,UAAL,CAAgBa,IAAhB,CAAqB,KAAKZ,GAA1B,EAA+BQ,MAA/B,CAAP;AACH;;AACDE,EAAAA,MAAM,CAACF,MAAD,EAAS;AACX,WAAO,KAAKT,UAAL,CACFc,GADE,CACG,GAAE,KAAKb,GAAI,IAAGQ,MAAM,CAACC,SAAU,EADlC,EACqCD,MADrC,EAEFL,IAFE,CAEGT,KAAK,EAFR,CAAP;AAGH;;AACDoB,EAAAA,QAAQ,CAACC,EAAD,EAAK;AACT,WAAO,KAAKhB,UAAL,CAAgBG,GAAhB,CAAqB,GAAE,KAAKF,GAAI,IAAGe,EAAG,EAAtC,CAAP;AACH;;AACDC,EAAAA,MAAM,CAACD,EAAD,EAAK;AACP,WAAO,KAAKhB,UAAL,CAAgBiB,MAAhB,CAAwB,GAAE,KAAKhB,GAAI,IAAGe,EAAG,EAAzC,EAA4CZ,IAA5C,CAAiDT,KAAK,EAAtD,EAA0DD,GAAG,CAAEW,QAAD,IAAcC,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAAf,CAA7D,CAAP;AACH;;AAjCqB;;AAmC1BP,YAAY,CAACoB,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAItB,YAAV,EAAwBF,EAAE,CAACyB,QAAH,CAAYxB,EAAE,CAACyB,UAAf,CAAxB,CAAP;AAA6D,CAApH;;AACAxB,YAAY,CAACyB,KAAb,GAAqB,aAAc3B,EAAE,CAAC4B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE3B,YAAT;AAAuB4B,EAAAA,OAAO,EAAE5B,YAAY,CAACoB,IAA7C;AAAmDS,EAAAA,UAAU,EAAE;AAA/D,CAAtB,CAAnC","sourcesContent":["import { tap, first } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class TableService {\r\n    constructor(httpClient) {\r\n        this.httpClient = httpClient;\r\n        this.API = '/contacts';\r\n    }\r\n    list() {\r\n        return this.httpClient.get(this.API).pipe(first(), tap((contacts) => console.log(contacts)));\r\n    }\r\n    async save(record) {\r\n        console.log(record.idContact);\r\n        console.log(record);\r\n        if (record.idContact) {\r\n            console.log('update');\r\n            return this.update(record);\r\n        }\r\n        else {\r\n            console.log('save');\r\n            return this.create(record);\r\n        }\r\n    }\r\n    create(record) {\r\n        return this.httpClient.post(this.API, record);\r\n    }\r\n    update(record) {\r\n        return this.httpClient\r\n            .put(`${this.API}/${record.idContact}`, record)\r\n            .pipe(first());\r\n    }\r\n    loadById(id) {\r\n        return this.httpClient.get(`${this.API}/${id}`);\r\n    }\r\n    delete(id) {\r\n        return this.httpClient.delete(`${this.API}/${id}`).pipe(first(), tap((contacts) => console.log(contacts)));\r\n    }\r\n}\r\nTableService.ɵfac = function TableService_Factory(t) { return new (t || TableService)(i0.ɵɵinject(i1.HttpClient)); };\r\nTableService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TableService, factory: TableService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}